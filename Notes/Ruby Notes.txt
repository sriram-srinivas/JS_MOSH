Source: https://www.javatpoint.com/ruby-tutorial

Ruby
    It is fully object oriented programming language. Everything is an object in Ruby. Each and every code has their properties and actions. Here properties refer to variables and actions refer to methods

Syntax comparison with JS / JAVA
    console.log() -> puts() or puts "" #print statement
    {a:1,b:2} -> {"a" => 1, "b" => 2} # object syntax
    prompt() -> gets.chomp.to_i # get input from user
    continue -> next # skip loop
    new ClassName() -> ClassName.new() #object creation
    closures -> blocks
    'Hello ${varName}' -> 'Hello #{varName}' # to do Sting literals 
    undefined -> nil

    Module Namespaces -> similar to Packages in java
    Modules -> used to perform import/export of JS Modules
    Mixins -> Multiple inheritance (Java) & Module import (JS)

Comments
    # -> single line comments
    =begin -> multi line comments
    .any comments
    .goes
    .here
    =end

Operators
    Airthmetic operator -> all same as JS, ** is used for exponent
    Bitwise operator -> & - AND, | - OR, << - Left shift, >> - Right Shift, ^ - XOR, ~ - Complement 
    Logical operator -> &&, ||
    Ternary operator -> condtion ? true : false
    Assignment operator -> same as JS, %=, **= is also there
    Comparison operator -> like in JS ==, !=, <, >, <=, >= 
            <=> -> single operator that return -1 (less), 0 (equal), 1 (greater)
                puts(1<=>1) # 0
                puts(2<=>1) # 1
                puts(1<=>2) # -
            .eql? -> '===' of JS
    Range operator
        .. -> used to cread iterable puts((10..15).to_a) prints 10, 11, 12, 13, 14, 15
        .. -> used to cread iterable puts((10...15).to_a) prints 10, 11, 12, 13, 14


Variables
    Local Variables
        Starts with lowercase or _, block level scope, needs to be initialized before use else error is thrown
    Class Variables
        Starts with @@, Class scoped: (like singleton Variable) if changed in one object of class all objects get the value reflected, needs to be initialized before use else error is thrown
    Instance Variables
        Starts with @, Object scoped: can be accesed inside the functions of the Object it is created in, need not be initialized default value is 'nil'
    Global Variables
        Starts with $, Global scope, need not be initialized default value is 'nil', not good practice to use


    Note: 
        This means we can have same variable name 'test' for 4 variables like '_test, @@test, @test and $test' 
        if we use @test & @@test outside a class, warning is thrown


Data Type
    Number
    String
    Symbol
    Hash -> JS objects with different syntax
    Array
    Boolean

Conditional Statements
    IF
        if _a >= 18
            #code
        elsif -a < 0 # not elseif, elsif
            #code
        else
            #code
        end

    Case


        case _variable
        when "val1"
            #code
        when "val2"
            #code
        .
        .
        .
        else
            #code
        end

    FOR
        for i in 1..5 do   
            puts i   
        end   #prints 1 to 5

        _x = ["Blue", "Red", "Green", "Yellow", "White"]   
        for i in _x do   
            puts i   
        end   #Print array element in loop

    WHILE
        Runs the loop until condition becomes false
        _x = 5
        while _x >= 0    
            puts _x   
            _x -=1   
        end  # prints 5 to 1
    
    DO WHILE
        loop do   
            puts "Checking for answer"   
            answer = gets.chomp   
            if answer != '5'   
                break   
            end   
        end
    
    UNTIL
        Same as while but runs the loop until condition becomes true
        i = 1   
        until i == 10    
            i += 1   
        end  
    
    BREAK
        'break' statement used inside loops to stop loop totally

    NEXT
        'next' statement used inside loops to skip current loop

    REDO
        'redo' statement used inside loops to repeat current loop

    RETRY
        'retry' statement used inside loops to repeat the whole loop iteration from the start.

    
Classes
    As usaul blueprint of an object.
    Each Ruby class is an instance of class Class. Classes in Ruby are first-class objects.
    Ruby class always starts with the keyword class followed by the class name. Conventionally, for class name we use CamelCase. The class name should always start with a capital letter. Defining class is finished with end keyword.

        class Novel   
            attr_accessor :pages, :category  
            
            def initialize   
                yield(self)   
            end   
        end

    Getters and Setters
        class Novel   
            attr_accessor :pages, :category     # creates getters and setters for 'pages' & 'catergory'. Only then they can be used in objects to get & set values

Objects
    Object is the default root of all Ruby objects. 
    Ruby objects inherit from 'BasicObject' (like protoyped Objects in JS) which allows creating alternate object hierarchies.
    Object mixes in the 'Kernel module' which makes the built-in Kernel functions globally accessible.


    Initializing ad Object

        class Novel   
            attr_accessor :pages, :category   
            
            def initialize   
                yield(self)   
            end   
        end   

        n1 = 1                              # dummy Obj
        novel = Novel.new do |n|            # Novel.new passes a temp reference of to be created objec to 'n'
        n.pages = 564   
        n.category = "thriller"
        puts novel == n                     # outputs 'false'. Since n is temp obecjt at this time
        n1 = n                              # final object reference 'n' is set to 'n1'
        end 
        
        puts n1 == novel                    # ouputs 'true'. as the final object of 'n' is same as 'novel'
        puts "I am reading a #{novel.category} novel which has #{novel.pages} pages." 

        #output
            false           # for novel ==n
            true            #for n1 == novel
            I am reading a thriller novel which has 564 pages. 



Methods / Functions
    Ruby method is defined with the def keyword.

    def methodName(param)
        puts "Hello #{param}"
    end  

     A method is called by just writing its name. No need to invoke using (). 
     Note: If def is not having params no need to put () at end of methdName in Method definition


Ruby Blocks
    Ruby code blocks are called closures in other programming languages
    It consist of a group of codes which is always enclosed with braces or written between do..end
    Braces have high precedence and do has low precedence.
    To invoke a block, you need to have a function with the same name as the block

    Multiline blocks
        [10, 20, 30].each do |n|   
            puts n   
        end   
    
    Inline blocks
        [10, 20, 30].each {|n| puts n}  

    Both prints array elements

    Scope & precedence
        Blocks have scope and variables inside block cant be accesed outside as usual, and if duplicate variable name is used inner defined variables have higher precedence as well

Yield
    The yield statement is used to call a block within a method with a value. i.e for each 'yield' the block next to met is invoked.
    While the execution of met method, when we reach at yield line, the code inside the block is executed. When block execution finishes, code for met method continues.

    #code
        def met   
                puts "This is method"                   # executed 1st
            yield                                       # executes block where 'met is called'; so "This is block" is printed
                puts "You will be back to method"       # executed 3rd
            yield                                       # "This is block" is printed
            yield                                       # "This is block" is printed
            yield                                       # "This is block" is printed  
        end

    met {puts "This is block"}

    #output
        This is method
        This is block
        You will be back to method
        This is block
        This is block
        This is block   
    
    Passing parameters with yield statement

        One or more than one parameter can be passed with the yield statement.
    
        #code
            def met   
                yield 1   
                puts "This is method"   
                yield 2   
            end   
            
            met {|i| puts "This is block #{i}"}   

        #output
            This is block 1
            This is method
            This is block 2


BEGIN and END block
    Ruby BEGIN and END block is used to declare that file is being loaded and file has been loaded respectively.
        
    #code
        puts "Load1"
        BEGIN {   
            puts "Start"   
        }   
        
        END {   
            puts "End"   
        }   
        puts "Load2"  

    #output
        Start
        Load1
        Load2
        End


Ampersand parameter (&varName)
    The &varName is a way to pass a reference pointer of the block to a method.

    #code
        def met(&var)   
            puts "This is method"   
            var.call   
        end   
        met { puts "This is &varName example" }   

    #output
        This is method
        This is &varName example

    Any variable after & is reference to the block after 'met'. It is called useing '.call'. i.e  '.call == yield'


Ruby Modules
    Ruby module is a collection of class, methods or constants. Module name should start with a capital letter.

    Modules basically serve two purposes:

        They act as namespace. They prevent the name clashes.                   #Java Packages
        They allow the mixin facility to share functionality between classes.   #JS mulitple module import

    A module method may be instance method or module method.

    Instance methods are methods in a class when module is included.

    Module methods may be called without creating an encapsulating object while instance methods may not.

    They are similar to classes as they hold a collection of methods, class definitions, constants and other modules. 
    They are defined like classes. 
    
    Objects or subclasses can not be created using modules. There is no module hierarchy of inheritance.


    Module Namespaces (Java Packages)

        #file1.rb
            module Library   
                num_of_books = 300   
                def Library.fiction(120)   
                    # ..   
                end   
                def Library.horror(180)   
                    # ..   
                end   
            end  


        #file2.rb
            module Novel   
                total = 123   
                read = 25   
                def Novel.fiction(left)   
                    # ...   
                end   
            end  

        #file3.rb
            require "Library"               # Module Imports
            require "Novel"   
            
            x = Library.fiction(Library::num_of_books)   
            y = Novel.fiction(Novel::total)  


    Module Mixins
        Mixins eliminate the need of multiple inheritance in Ruby
        A module doesn't have instances because it is not a class. However, a module can be included within a class.

        When you include a module within a class, the class will have access to the methods of the module.

        //code
            module Name   
                def bella   
                    #
                end   
                def ana   
                    #    
                end   
            end   
                
            module Job   
                def editor   
                    #
                end   
                def writer   
                    #
                end   
            end   
                
            class Combo   
                include Name                # inherited Modules
                include Job   
               
                def f   
                    #
                end   
            end   
                
            final=Combo.new   
            final.bella   
            final.ana   
            final.editor   
            final.writer   
            final.f 


Strings
    '' or "" accepted

    puts '1'*3                                  # outputs '111'

    msg = "This tutorial is from JavaTpoint."   
    
    puts msg["Hello"]                           #  outputs 'nill'
    puts msg["JavaTpoint"]                      #  outputs 'JavaTpoint'
    puts msg["tutorial"]                        #  outputs 'tutorial'  
    puts msg[0]                                 #  outputs 'T'  
    puts msg[0,2]                               #  outputs 'Th'    
    puts msg[0..19]                             #  outputs 'This tutorial is fro'  
    puts msg[0, msg.length]                     #  outputs 'This tutorial is from JavaTpoint.' 
    puts msg[-3]                                #  outputs 'n'


    puts "                                      # prints as is in multi line
    A   
    AB   
    ABC   
    ABCD"   
    
    puts %/                                     # Another syntax to print as is in multi line
    A   
    AB   
    ABC   
    ABCD/  

    String literals
        'This is a #{varName}' 

    Sting concat
        "A"+"B"
        "A" "B"
        "A"<<"B"
        "A".concat("B")

    Immutable Stings
        In most programming languages strings are immutable. It means that an existing string can't be modified, only a new string can be created out of them.
        In Ruby, by default strings are not immutable. To make them immutable, freeze method can be used.

        str = "Original string"   
        str << " is modified "          #concat allowed
        str.freeze   
        str << "is again modified"      #concat not allowed, error is thrown
  
    String comparison

        puts "abc" == "abc"             #true 
        puts "as ab" == "ab ab"         #false  
        puts "23" == "32"               #false  
        
        puts "ttt".eql? "ttt"           #true
        puts "12".eql? "12"             #true
        
        String case insensitive comparison    
            puts "Java".casecmp "Java"      #0 (true) 
            puts "Java".casecmp "java"      #0 (true)
            puts "Java".casecmp "ja"        #1 (false)


Arrays
    Can be created using [] or Array.new

    Array.new(10)           #creates array of size 10

    temp = Array.new(5)
    puts temp.size, temp.length     #outputs 5,5

    Easily populate array using Range operator
            num = Array("1".."10")
            puts num                            # prints array elements from 1 to 10

            (1..10).to_a                        #creates array with values from 1 to 10
            (1..10).to_a.reverse                #creates array with values from 10 to 1

    Array Methods
        .size                       #Returns Length of array
        .length                     #Returns Length of array
        Array.new(n)                #creates array, () needed only is size is to be mentioned 
        [index]                     #returns element in that index, if out of bound 'nil' is returned
        [index,length]              #eg[1,3], will return 3 elements starting from 1 index
        [1..n]                      #returns all indexes ranging from [1...n]
        .at(index)                  #returns element at the index
        .fetch(index,default)       #returns element at the index, if index is out of bound, default is returned
        .first                      #returns 1st element of array
        .last                       #returns last element of array
        .take(n)                    #returns 0 to n elements from array
        .drop(n)                    #rerurn n+1 till end of array
        .push(element)              #add element to array
        <<                          #add element to array
        unshift                     #adds new element to beginig of array
        insert(position,element)    #adds element at given position
        
        pop                         #removes last element from array
        shift                       #removes first element from array
        delete(element)             #removes the element if available
        uniq                        #remove duplicates              



Hashes
    Syntax
        name = {"key1" => "value1", "key2" => "value2", "key3" => "value3"...}  

    Hash Methods
        hsh==other_hash								#Two hashes are equal if they contain same key and value pair.
        hsh[key]									#Retrieve value from the respective key.
        hsh[key] = value							#Associates new value to the given key.
        assoc(obj)									#Compare obj in the hash.
        clear										#Remove all key value pair from hash.
        compare_by_identity							#Compare hash keys by their identity.
        compare_by_identity?						#Return true if hash compare its keys by their identity.
        default(key=nil)							#Return default value.
        default = obj								#Sets the default value.
        delete(key)									#Delete key value pair.
        each										#Call block once for each key in hash.
        empty?										#Return true if hash contains no key value pair.
        eql>(other)									#Return true if hash and other both have same content
        fetch(key[, default])						#Return value from hash for a given key.
        flatten										#Return a new array that is a one-dimensional flattening of this hash.
        has_key?(key)								#Return true if given key is present in hash.
        has_value?(value)							#Return true if given value is present in hash for a key.
        include?(key)								#Return true if given key is present in hash.
        to_s/ inspect								#Return content of hash as string.


Date & Time
    Ruby date provides two classes, Date and DateTime.

    To understand the concept of date, first we need to understand some terms.

    *Calendar date: The calendar date is a particular day within a calendar month within a year.
    *Ordinal date: The ordinal date is a particular day of a calendar year identified by its ordinal number.
    *Week date: The week date is a day identified by calendar week and day numbers. The first calendar week of the year is the one which includes first Thursday of that year.
    *Julian day number: The julian day number is in elapsed day since noon on January 1, 4713 BCE.
    *Modified julian day number: The modified julian day number is in elapsed day since midnight on November 17, 1858 CE.
    
    The Date object is created with 
    .new
    .parse
    .today
    .jd
    .strptime
    
    All date objects are immutable, hence they can't modify themselves


    Date Methods
        Date.new(2017,4,3)            
        Date.jd(2451877)               
        Date.ordinal(2017,3)         
        Date.commercial(2017,5,6)     
        Date.parse('2017-02-03')    
        Date.strptime('03-02-2017', '%d-%m-%Y')                           
        Time.new(2017,10,8).to_date   


        d = Date.parse('4th Mar 2017')   
                                    
        d.year                        
        d.mon                         
        d.mday                        
         d.wday                        
        d += 1                        
        d.strftime('%a %d %b %Y')    


DateTime
    Ruby DateTime is a subclass of Date. It easily handles date, hour, minute, second and offset.
    The DateTime object created with 
        DateTime.new
        DateTime.ordinal
        DateTime.parse
        DateTime.jd
        DateTime.commercial
        DateTime.now

    DateTime Methods
        d = DateTime.parse('4th Mar 2017 02:37:05+05:40')   
                       
        d.hour                 
        d.min                 
        d.sec                  
        d.offset               
        d.zone
        d.new_offset('+05:00')   

Ranges               
    (-5..-1).to_a, create rage from -5 to -1
    incorrect values either result in error or no Range
    '..' or '...' is used to create rages, check 'Range operator'

    //code
        range = 0..5   
  
        range.include?(3)   
        range.min   
        range.max   
        range.reject {|i| i < 5 }   
        range.each

    
    Range as conditions

        budget = 50000   
  
        watch = case budget   
            when 100..1000 then "Local"   
            when 1000..10000 then "Titan"   
            when 5000..30000 then "Fossil"   
            when 30000..100000 then "Rolex"   
            else "No stock"   
        end   


    Ranges as Intervals
        Ranges can also be defined in terms of intervals. Intervals are represented by === case equality operator.

        //Code
            if (('a'..'z') === 'v')   
                puts "v lies in the above range"   
            end   
            
            if (('50'..'90') === 99)   
                puts "z lies in the above range"   
            end  


Iterator

    Each
        (collection).each do |variable|  
            code...  
        end 

        (1...5).each do |i|   
            puts i   
        end                         #print 1 to 4 as '...' is used  

    TIMES
        x.times do |variable|  
            code...  
        end   

        5.times do |n|   
            puts n   
        end                         #prints 0 to 4


    UPTO
        1.upto(5) do |n|   
            puts n   
        end

    STEP
        (10..50).step(5) do |n|   
            puts n   
        end                     # 10, 15, 20


    EACH_LINE
        "All\nthe\nwords\nare\nprinted\nin\na\nnew\line.".each_line do |line|   
            puts line   
        end  


File I/O
    Ruby I/O is a way to interact with your system. Data is sent in the form of bytes/characters. IO class is the basis for all input and output in Ruby. It may be duplexed, hence may use more than one native operating system stream.

    Modes
        "r": read-only mode is the default mode starts at beginning of file.
        "r+": read-write mode, starts at beginning of file.
        "w": write-only mode, either creates a new file or truncates an existing file for writing.
        "w+": read-write mode, either creates a new file or truncates an existing file for reading and writing.
        "a": write-only mode, if file exists it will append the file othrwise a new file will be created for writing only.
        "a+": read and write mode, if file exists it will append the file othrwise a new file will be created for writing and reading.


    IO console
        IO::console
        IO#raw#raw!
        IO#cooked
        IO#cooked!
        IO#getch
        IO#echo=
        IO#echo?
        IO#noecho
        IO#winsize
        IO#winsize=
        IO#iflush
        IO#ioflush
        IO#oflush





MD5
    require 'digest'

    puts Digest::MD5.hexdigest 'Maximum Effort'             # MD5 'Maximum Effort'












Kernel module??