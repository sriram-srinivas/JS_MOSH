Rails
    Ruby on Rails is a server-side web application development framework written in Ruby language b

Rails Scripts
    Rails provides us some excellent tools that are used to develop Rails application. These tools are packaged as scripts from command line.

    Following are the most useful Rails scripts used in Rails application:
        Rails Console
        WEBrick Web Server
        Generators
        Migrations

Installation
    Prerequisites
        rbenv
        ruby
        node
        mysql

    gem install bundler -v version          # bundler handles gemfile dependencies

    gem install rails -v version            # install specific version for rails

    rbenv rehash

    rails -v                                # check rails installation

    gem install mysql2                      # install mysql gem

Create Project
    Create a new folder and move to that folder in terminal, then Run
        rails new projectName -d mysql      # create new project with mysql as database

        cd projectName

    In database.yml update your uname and password in respective fields

    Create dev, prod and test Db as mentioned in database.yml


    rails server                            # start rails server

    rails server -p portNumber              # To start in specific port

    rails generate controller controllerName         # create controller

    rails destroy controller controllerName          # destroy controller use only if needed
    
    create a controller with name of your choice

    got to app > views > controller Name you entered > create a file 'index.html.erb'

    Put some test html code

    Now map the same file as root file in 'routes.rb' 

    routes.rb
        route 'controller#fileName'                 #controller - name of controller; filename - app > views > controllerName > fileName


Ruby Folder structure
    app                 -> It works as the remainder of this directory. Basically it organizes our application component. It holds MVC.
    app/assets          -> This folder contains static files required for application's front-end grouped into folders based on their type.
    app/controllers     -> All the controller files are stored here. A controller handles all the web requests from the user.
    app/helpers         -> It contains all the helper functions to assist MVC.
    app/mailers         -> It contains mail specific functions for the application.
    app/models          -> It contains the models and data stored in our application's database.
    app/views           -> This folder contains the display templates to fill data in our application.
    bin                 -> It basically contains Rails script that start your app. It can also contain other scripts use to setup, upgrade or run the app.
    config              -> It configures our application's database, routes and more.
    db                  -> It contains our current database schema and database migrations.
    lib                 -> It contains extended module for your application.
    log                 -> It contains application log files.
    public              -> It contains static files and compiled assets. This is the only folder seen by the world.
    test                -> It contains unit tests, other test apparatus and fixtures.
    tmp                 -> It contains temporary files like cache and pid files.
    vendor              -> It contains all third-party code like vendor gems.
    Gemfile             -> Here all your app's gem dependencies are declared. It is mandatory as it includes Rails core gems among other gems.
    Gemfile.lock        -> It holds gems dependency tree including all versions for the app.
    README.md           -> It is a brief instruction manual for your application.
    Rakefile            -> It locates and loads tasks that can be run from the command line.
    config.ru           -> Rack configuration for Rack based servers used to start the application.


Generating a Scaffold
    Rails scaffolding quickly generates a set of CRUD operations for a resource. Letâ€™s create a scaffold for a Post resource with title and body attributes:

    rails generate scaffold Post title:string body:text

    This command generates:

        Model (post.rb)
        Database migration (db/migrate)
        Controller (posts_controller.rb)
        Routes
        JSON views

    Run the migration to create the posts table in your database:
        rails db:create
        rails db:migrate    

Active Record
    Active record is used to implement ORM in rails.
    Object-relational-mapping (ORM) is the mapping of relational database tables to object-oriented classes. 
    This is used to remove the mismatch between your program's object view and database's relational data view

    A perfect ORM hides the details of a database's relational data behind the object hierarchy. In Rails, ORM is implemented by Active Record which is one of the most important components of the Rails library.
    
    Active Record Classes and Objects
        Each table in a database is generally represented by a class that extends Active Record base class. By extending Active Record base classes, model objects inherit a lot of functionalities.

        While using Active Records, you don't have to set up any database connections. It manages all the database connections for an appication. It adds attributes to your class for each of the columns in the database.

    Active Record naming conventions
        Active Record uses the CoC (convention over configuration) principle. On following naming convention, you can take advantage of many dynamic features of Active Record without any configuration.
    
    Class Vs Database
        Database table should be named in the plural form and in lowercase of your model classes. 
            Eg:
                        Class Name                                              DB Table Name
                    Student                                                  students
                    Person                                                   people
                    Car                                                      cars
                    Child                                                    children
                    Datum                                                    data    

        With the help of this convention, Rails will automatically find the corresponding table to your model class without any configuration code. 
        Note: It even supports plural nouns such as 'people' as the plural of 'person'.
        
        To turn this off add below code in 'config/environment.rb'
            ActiveRecord::Base.pluralize_table_names = false




Rails MVC
    Requests first come to the controller, controller finds an appropriate view and interacts with model which in turn interacts with database and send response to controller. Then controller gives the output to the view based on the response.

    MVC flow
        Input ----> Controller ----> Selects View ----> Interacts with Model ----> DB ----> Model ----> Controller ----> sends View ----> output


    Model
        The models are classes in Rails. They interact with database, store data, handles validation, transaction, etc
        Handled by 'ActiveRecord' library
        Ruby method names are automatically generated from database tables field names.

    View
        View represent data in a particular format in an application for the users. It handles HTML, CSS, JavaScript and XML in an application. They do what controller tells them.
        Handled by 'ActionView' library. This library is an Embedded Ruby (Erb) based system which define presentation templates for data presentation.

    Controller
        Controller directs traffic to views and models. It query models for data from the database and display the desired result with the help of view in an application.
        This subsystem is implemented in ActionController librapry. This library is a data broker sitting between ActiveRecord and ActionView.




Rails Router
    Router is a way to redirect incoming requests to controllers and actions

    METHOD 'controller/:route' => 'controller#method'  

    get 'roll/:id' => 'roll#branch'                     # In this example GET method if invoked for 'roll/12344' rails will point to 'branch' method of 'roll' controller
    get 'roll/:id' to: 'roll/branch'                    # another syntax


    rake routes                                 # run this in terminal to check how routes are mapped to controlers in a Rails application


Scaffolding
    Scaffolding is a quick way for auto generating a set of models, views and controllers for a new resource in a single operation.